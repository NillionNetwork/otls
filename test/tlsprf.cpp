#include "emp-tool/emp-tool.h"
#include "backend/backend.h"
#include "prf/tlsprf.h"

#include <iostream>
#include <vector>

using namespace std;
using namespace emp;

void tlsprf_test() {
    vector<unsigned char> secret_u = {0x9b, 0xbe, 0x43, 0x6b, 0xa9, 0x40, 0xf0, 0x17, 0xb1, 0x76, 0x52, 0x84, 0x9a, 0x71, 0xdb, 0x35};
    vector<unsigned char> seed_u = {0xa0, 0xba, 0x9f, 0x93, 0x6c, 0xda, 0x31, 0x18, 0x27, 0xa6, 0xf7, 0x96, 0xff, 0xd5, 0x19, 0x8c};
    vector<unsigned char> label_u = {0x74, 0x65, 0x73, 0x74, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c};

    vector<unsigned char> output_u = {0xe3, 0xf2, 0x29, 0xba, 0x72, 0x7b, 0xe1, 0x7b, 0x8d, 0x12, 0x26, 0x20, 0x55, 0x7c, 0xd4, 0x53, 0xc2, 0xaa, 0xb2, 0x1d, 0x07, 0xc3, 0xd4, 0x95, 0x32, 0x9b, 0x52, 0xd4, 0xe6, 0x1e, 0xdb, 0x5a, 0x6b, 0x30,
                                      0x17, 0x91, 0xe9, 0x0d, 0x35, 0xc9, 0xc9, 0xa4, 0x6b, 0x4e, 0x14, 0xba, 0xf9, 0xaf, 0x0f, 0xa0, 0x22, 0xf7, 0x07, 0x7d, 0xef, 0x17, 0xab, 0xfd, 0x37, 0x97, 0xc0, 0x56, 0x4b, 0xab, 0x4f, 0xbc, 0x91, 0x66,
                                      0x6e, 0x9d, 0xef, 0x9b, 0x97, 0xfc, 0xe3, 0x4f, 0x79, 0x67, 0x89, 0xba, 0xa4, 0x80, 0x82, 0xd1, 0x22, 0xee, 0x42, 0xc5, 0xa7, 0x2e, 0x5a, 0x51, 0x10, 0xff, 0xf7, 0x01, 0x87, 0x34, 0x7b, 0x66};

    reverse(secret_u.begin(), secret_u.end());
    reverse(seed_u.begin(), seed_u.end());
    reverse(label_u.begin(), label_u.end());
    reverse(output_u.begin(), output_u.end());

    Integer secret(128, secret_u.data());
    Integer seed(128, seed_u.data());
    Integer label(80, label_u.data());
    Integer output(800, output_u.data());

    Integer res;
    TLSPrf tlsprf;
    tlsprf.prf(res, 800, secret, label, seed);

    //assert(output == res);
    if ((output == res).reveal<bool>(PUBLIC)) {
        cout << "test passed!" << endl;
    } else {
        cout << "test failed!" << endl;
    }
    cout << tlsprf.compression_calls() << endl;
}

void opt_tlsprf_test() {
    vector<unsigned char> secret_u = {0x9b, 0xbe, 0x43, 0x6b, 0xa9, 0x40, 0xf0, 0x17, 0xb1, 0x76, 0x52, 0x84, 0x9a, 0x71, 0xdb, 0x35};
    vector<unsigned char> seed_u = {0xa0, 0xba, 0x9f, 0x93, 0x6c, 0xda, 0x31, 0x18, 0x27, 0xa6, 0xf7, 0x96, 0xff, 0xd5, 0x19, 0x8c};
    vector<unsigned char> label_u = {0x74, 0x65, 0x73, 0x74, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c};

    vector<unsigned char> output_u = {0xe3, 0xf2, 0x29, 0xba, 0x72, 0x7b, 0xe1, 0x7b, 0x8d, 0x12, 0x26, 0x20, 0x55, 0x7c, 0xd4, 0x53, 0xc2, 0xaa, 0xb2, 0x1d, 0x07, 0xc3, 0xd4, 0x95, 0x32, 0x9b, 0x52, 0xd4, 0xe6, 0x1e, 0xdb, 0x5a, 0x6b, 0x30,
                                      0x17, 0x91, 0xe9, 0x0d, 0x35, 0xc9, 0xc9, 0xa4, 0x6b, 0x4e, 0x14, 0xba, 0xf9, 0xaf, 0x0f, 0xa0, 0x22, 0xf7, 0x07, 0x7d, 0xef, 0x17, 0xab, 0xfd, 0x37, 0x97, 0xc0, 0x56, 0x4b, 0xab, 0x4f, 0xbc, 0x91, 0x66,
                                      0x6e, 0x9d, 0xef, 0x9b, 0x97, 0xfc, 0xe3, 0x4f, 0x79, 0x67, 0x89, 0xba, 0xa4, 0x80, 0x82, 0xd1, 0x22, 0xee, 0x42, 0xc5, 0xa7, 0x2e, 0x5a, 0x51, 0x10, 0xff, 0xf7, 0x01, 0x87, 0x34, 0x7b, 0x66};

    reverse(secret_u.begin(), secret_u.end());
    //reverse(seed_u.begin(), seed_u.end());
    //reverse(label_u.begin(), label_u.end());
    reverse(output_u.begin(), output_u.end());

    Integer secret(128, secret_u.data());
    unsigned char* seed = seed_u.data();
    unsigned char* label = label_u.data();

    Integer output(800, output_u.data());

    Integer res;
    TLSPrf tlsprf;
    tlsprf.opt_prf(res, 800, secret, label, label_u.size(), seed, seed_u.size());

    //assert(output == res);
    if ((output == res).reveal<bool>(PUBLIC)) {
        cout << "test passed!" << endl;
    } else {
        cout << "test failed" << endl;
    }
    cout << tlsprf.compression_calls() << endl;
}

void opt_tlsprf_circ_test() {
    vector<unsigned char> secret_u = {0x9b, 0xbe, 0x43, 0x6b, 0xa9, 0x40, 0xf0, 0x17, 0xb1, 0x76, 0x52, 0x84, 0x9a, 0x71, 0xdb, 0x35, 0x9b, 0xbe, 0x43, 0x6b, 0xa9, 0x40, 0xf0, 0x17, 0xb1, 0x76, 0x52, 0x84, 0x9a, 0x71, 0xdb, 0x35};

    unsigned char label[] = {"master key"};
    unsigned char seed[] = {"0123456789012345678901234567890123456789012345678901234567890123"};
    size_t sec_len = 256;
    size_t label_len = 10;
    size_t seed_len = 64;
    Integer secret(sec_len, secret_u.data(), ALICE);
    TLSPrf tlsprf;
    Integer res;
    tlsprf.opt_prf(res, 48 * 8, secret, label, label_len, seed, seed_len);

    cout << "Call Compression Function: " << tlsprf.compression_calls() << " times" << endl;
    cout << "Call HMAC-SHA256: " << tlsprf.hmac_calls() << " times" << endl;
}

void handshake_prf_circ_test() {
    vector<unsigned char> pms_u = {0x9b, 0xbe, 0x43, 0x6b, 0xa9, 0x40, 0xf0, 0x17, 0xb1, 0x76, 0x52, 0x84, 0x9a, 0x71, 0xdb, 0x35, 0x9b, 0xbe, 0x43, 0x6b, 0xa9, 0x40, 0xf0, 0x17, 0xb1, 0x76, 0x52, 0x84, 0x9a, 0x71, 0xdb, 0x35};
    size_t pms_len = 256;

    unsigned char mk_label[] = {"master key"};
    size_t mk_label_len = 10;

    unsigned char ke_label[] = {"key expansion"};
    size_t ke_label_len = 13;

    unsigned char cfin_label[] = {"client finished"};
    size_t cfin_label_len = 15;

    unsigned char sfin_label[] = {"server finished"};
    size_t sfin_label_len = 15;

    unsigned char mk_seed[] = {"0123456789012345678901234567890123456789012345678901234567890123"};
    size_t mk_seed_len = 64;

    unsigned char ke_seed[] = {"2345678901234567890123456789012301234567890123456789012345678901"};
    size_t ke_seed_len = 64;

    unsigned char ctau[] = {"01234567890123456789012345678901"};
    size_t ctau_len = 32;

    unsigned char stau[] = {"67890123456789010123456789012345"};
    size_t stau_len = 32;

    TLSPrf tlsprf;
    Integer pms(pms_len, pms_u.data(), ALICE);

    Integer ms;
    tlsprf.opt_prf(ms, 384, pms, mk_label, mk_label_len, mk_seed, mk_seed_len);

    Integer sk;
    tlsprf.opt_prf(sk, 320, ms, ke_label, ke_label_len, ke_seed, ke_seed_len);

    Integer ucfin;
    tlsprf.opt_prf(ucfin, 96, ms, cfin_label, cfin_label_len, ctau, ctau_len);

    Integer usfin;
    tlsprf.opt_prf(usfin, 96, ms, sfin_label, sfin_label_len, stau, stau_len);

    cout << "Call Compression Function: " << tlsprf.compression_calls() << " times" << endl;
    cout << "Call HMAC-SHA256: " << tlsprf.hmac_calls() << " times" << endl;
}

int main(int argc, char** argv) {
    // setup_plain_prot(false, "");
    // tlsprf_test();
    // opt_tlsprf_test();
    // finalize_plain_prot();

    int port, party;
    parse_party_and_port(argv, &party, &port);
    NetIO* io = new NetIO(party == ALICE ? nullptr : "127.0.0.1", port);
    setup_backend(io, party);

    //opt_tlsprf_circ_test();
    handshake_prf_circ_test();
    cout << "AND gates: " << dec << CircuitExecution::circ_exec->num_and() << endl;
    finalize_backend();

    delete io;
}